generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  role      Role     @default(STAFF)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedCases Case[] @relation("AssignedTo")
  ownedLeads    Lead[] @relation("LeadOwner")
  tasks         Task[] @relation("TaskAssignee")
  activities    Activity[]
  drafts        Draft[]
  notifications Notification[]
  auditLogs     AuditLog[]

  @@map("users")
}

model Contact {
  id        String   @id @default(cuid())
  userId    String?  // Optional link to User if they have portal access
  firstName String
  lastName  String
  email     String
  phone     String?
  company   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User?  @relation(fields: [userId], references: [id])
  leads Lead[]
  cases Case[]

  @@map("contacts")
}

model Lead {
  id        String     @id @default(cuid())
  source    String
  status    LeadStatus @default(NEW)
  notes     String?
  ownerId   String
  contactId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  owner   User    @relation("LeadOwner", fields: [ownerId], references: [id])
  contact Contact @relation(fields: [contactId], references: [id])

  @@map("leads")
}

model Case {
  id         String     @id @default(cuid())
  contactId  String
  visaType   String
  country    String
  stage      CaseStage  @default(NEW)
  priority   Priority   @default(MEDIUM)
  assignedTo String?
  openedAt   DateTime   @default(now())
  dueAt      DateTime?
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  contact    Contact    @relation(fields: [contactId], references: [id])
  assignee   User?      @relation("AssignedTo", fields: [assignedTo], references: [id])
  tasks      Task[]
  activities Activity[]
  documents  Document[]
  drafts     Draft[]
  invoices   Invoice[]

  @@map("cases")
}

model Task {
  id         String     @id @default(cuid())
  caseId     String?
  title      String
  description String?
  status     TaskStatus @default(PENDING)
  assigneeId String
  dueAt      DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  case     Case? @relation(fields: [caseId], references: [id])
  assignee User  @relation("TaskAssignee", fields: [assigneeId], references: [id])

  @@map("tasks")
}

model Activity {
  id        String       @id @default(cuid())
  caseId    String
  type      ActivityType
  title     String
  content   String?
  payload   Json?
  createdBy String
  createdAt DateTime     @default(now())

  // Relations
  case    Case @relation(fields: [caseId], references: [id])
  creator User @relation(fields: [createdBy], references: [id])

  @@map("activities")
}

model Document {
  id        String   @id @default(cuid())
  caseId    String
  filename  String
  mimeType  String
  url       String
  checksum  String?
  tags      String[]
  ocrText   String?
  size      Int?
  uploadedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  case Case @relation(fields: [caseId], references: [id])

  @@map("documents")
}

model Draft {
  id        String      @id @default(cuid())
  caseId    String
  type      DraftType
  title     String
  bodyMd    String
  status    DraftStatus @default(DRAFT)
  createdBy String
  reviewedBy String?
  reviewedAt DateTime?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  case    Case @relation(fields: [caseId], references: [id])
  creator User @relation(fields: [createdBy], references: [id])

  @@map("drafts")
}

model Invoice {
  id        String        @id @default(cuid())
  caseId    String?
  number    String        @unique
  amount    Decimal       @db.Decimal(10, 2)
  currency  String        @default("GBP")
  status    InvoiceStatus @default(DRAFT)
  issuedAt  DateTime?
  dueAt     DateTime?
  paidAt    DateTime?
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  case     Case?     @relation(fields: [caseId], references: [id])
  payments Payment[]

  @@map("invoices")
}

model Payment {
  id        String   @id @default(cuid())
  invoiceId String
  amount    Decimal  @db.Decimal(10, 2)
  method    String
  txRef     String?
  paidAt    DateTime @default(now())
  createdAt DateTime @default(now())

  // Relations
  invoice Invoice @relation(fields: [invoiceId], references: [id])

  @@map("payments")
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  subject   String
  bodyMd    String
  variables String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_templates")
}

model WhatsAppTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  language  String   @default("en")
  category  String
  bodyText  String
  variables String[]
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("whatsapp_templates")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  content   String?
  payload   Json?
  readAt    DateTime?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model AuditLog {
  id       String   @id @default(cuid())
  actorId  String
  action   String
  entity   String
  entityId String
  diff     Json?
  createdAt DateTime @default(now())

  // Relations
  actor User @relation(fields: [actorId], references: [id])

  @@map("audit_logs")
}

// Enums
enum Role {
  SUPER_ADMIN
  ADMIN
  STAFF
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum LeadStatus {
  NEW
  QUALIFIED
  CONTACTED
  CONVERTED
  LOST
}

enum CaseStage {
  NEW
  DOCUMENTS
  REVIEW
  SUBMITTED
  DECISION
  APPROVED
  REJECTED
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ActivityType {
  NOTE
  CALL
  EMAIL
  WHATSAPP
  DOCUMENT_UPLOAD
  STATUS_CHANGE
  PAYMENT_RECEIVED
}

enum DraftType {
  COVER_LETTER
  INVITATION_LETTER
  CLARIFICATION_LETTER
  EMAIL
  SOP
}

enum DraftStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  SENT
  REJECTED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}